// C++ program to calculate distance between two coordinates on Earth 
#include <iostream> 
#include <iomanip>
#include <cmath>
using namespace std; 

// converting degrees to radians 
long double toRadians(const long double degree) 
{ 
	// cmath library in C++ defines the constant  M_PI as the value of pi accurate to 1e-30 
	long double one_deg = (M_PI) / 180; 
	return (one_deg * degree); 
} 

long double distance(long double lat1, long double long1, 
					long double lat2, long double long2) 
{ 
	// Convert the latitudes and longitudes from degree to radians. 
	lat1 = toRadians(lat1); 
	long1 = toRadians(long1); 
	lat2 = toRadians(lat2); 
	long2 = toRadians(long2); 
	
	// Haversine Formula 
	long double dlong = long2 - long1; 
	long double dlat = lat2 - lat1; 

	long double ans = pow(sin(dlat / 2), 2) + 
						cos(lat1) * cos(lat2) * 
						pow(sin(dlong / 2), 2); 

	ans = 2 * asin(sqrt(ans)); 

	// Radius of Earth in Kilometers, R = 6371 
	long double R = 6371; 
	
	// Calculate the result 
	ans = ans * R; 

	return ans; 
} 

// Driver Code 
int main() 
{ 
	long double lat1; 
	long double long1; 
    long double lat2; 
	long double long2; 

    // API Call
    cout << "User latitute: ";
    cin >> lat1;
    cout << "User longitude: ";
    cin >> long1;

    //To link database and store location of landmark in array
    long double landmark_lat[19];
    long double landmark_long[19];

    //array storing distance
    long double dist[19];
    setprecision(15);
    for(int i=0; i<19; i++){
        lat2 = landmark_lat[i];
        long2 = landmark_long[i];
        dist[i] = distance(lat1, long1, lat2, long2);
    }

// Printing min element i.e. nearest landmark
    cout << "\nNearest Landmark = "
         << *min_element(dist, dist + 19);


//    //sample input for landmark location
//     lat2 = 53.31861111111111; 
// 	long2 = -1.6997222222222223; 
	
// 	// call the distance function 
// 	cout << setprecision(15) << fixed; 
// 	cout << distance(lat1, long1, 
// 					lat2, long2) << " KM"; 
	
    return 0; 
} 

